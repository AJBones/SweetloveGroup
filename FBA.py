

#Function to convert any model with reversible reactions to a copy of the same m-
#-odel with only irreversible reactions. ID of reverse reactions are generated by 
#suffixing "_reverse" to the ID of the orignal reaction.
#args: 1) a cobra model
#output: a cobra model with only irreversible reactions
def rev2irrev(cobra_model):
  exp_model=cobra_model.copy()
  
  for RXN in cobra_model.reactions:
    rxn=exp_model.reactions.get_by_id(RXN.id)
    if (rxn.lower_bound < 0):
      rxn_reverse = rxn.copy()
      rxn_reverse.id = "%s_reverse" %(rxn.id)
      rxn.lower_bound = 0
      rxn_reverse.upper_bound = 0
      exp_model.add_reaction(rxn_reverse)
  
  return exp_model



#Function to constraint sum of fluxes when performing FBA
#args: 1) a cobra model, 2) a python list of reactions to leave out from constrai-
#-nt, 3) the float value that sum of fluxes must be constrained to & 4) value obj-
#-ective function needs to be constraint to (provide "" to avoid constraining obj-
#ective function)
#output: a cobra model with sum of fluxes constrained to 
def constrainSumOfFluxes(cobra_model, rxn2avoid,SFvalue,objvalue):
  temp=cobra_model.copy()
  SFMet = Metabolite("SFMet",name="Sum of fluxes pseudometabolite",compartment="c2")
  for rxn in cobra_model.reactions:
    if not rxn2avoid.__contains__(rxn.id):
      if rxn.id.__contains__("reverse"):
	temp.reactions.get_by_id(rxn.id).add_metabolites({SFMet:-1})
      else:
	temp.reactions.get_by_id(rxn.id).add_metabolites({SFMet:1})
  SFRxn = Reaction("SFRxn",name="Sum of fluxes pseudoreaction")
  SFRxn.add_metabolites({SFMet:-1})
  SFRxn.lower_bound=SFvalue
  SFRxn.upper_bound=SFvalue
  temp.add_reaction(SFRxn)
  if (not objvalue=="") and (len(temp.objective) == 1):
    for rxn in temp.objective.keys():
      rxn.lower_bound=objvalue
      rxn.upper_bound=objvalue
  return temp


